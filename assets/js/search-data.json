{
  
    
        "post0": {
            "title": "ArrayLists Notebook",
            "content": "import java.util.ArrayList; import java.util.Comparator; // Create an ArrayList object ArrayList&lt;String&gt; artists = new ArrayList&lt;String&gt;(); // add(int index, element) artists.add(&quot;Lil Wayne&quot;); artists.add(&quot;Kanye West&quot;); artists.add(&quot;Katy Perry&quot;); artists.add(&quot;Nujabes&quot;); artists.add(&quot;The Alchemist&quot;); System.out.println(&quot;- add(int index, element)&quot;); System.out.println(artists + &quot; n&quot;); // addAll(int index, Collection collection) ArrayList&lt;String&gt; songs = new ArrayList&lt;String&gt;(); songs.add(&quot;3 Peat&quot;); songs.add(&quot;Bound 2&quot;); songs.add(&quot;Dark Horse&quot;); songs.add(&quot;Feather&quot;); songs.add(&quot;Loose Change&quot;); artists.addAll(songs); System.out.println(&quot;- addAll(int index, Collection collection)&quot;); System.out.println(artists + &quot; n&quot;); // size() System.out.println(&quot;- size()&quot;); System.out.println(&quot;There are &quot; + artists.size() + &quot; terms in the ArrayList artists&quot;); System.out.println(&quot;There are &quot; + songs.size() + &quot; terms in the ArrayList songs&quot; + &quot; n&quot;); // clear() songs.clear(); System.out.println(&quot;- clear()&quot;); System.out.println(songs+ &quot; n&quot;); // remove(int index) artists.remove(5); System.out.println(&quot;- remove(int index)&quot;); System.out.println(artists + &quot; n&quot;); // remove(element) artists.remove(&quot;Kanye West&quot;); System.out.println(&quot;- remove(element)&quot;); System.out.println(artists + &quot; n&quot;); // get(int index) System.out.println(&quot;- get(int index)&quot;); System.out.println(artists.get(1) + &quot; n&quot;); // set(int index, element) artists.set(3, &quot;Feather&quot;); System.out.println(&quot;- set(int index, element)&quot;); System.out.println(artists + &quot; n&quot;); // indexOf(element) System.out.println(&quot;- indexOf(element)&quot;); System.out.println(artists.indexOf(&quot;Kanye West&quot;) + &quot; n&quot;); // lastIndexOf(element) System.out.println(&quot;- lastIndexOf(element)&quot;); System.out.println(artists.indexOf(&quot;Bound 2&quot;) + &quot; n&quot;); // equals(element) System.out.println(&quot;- equals(element)&quot;); System.out.println(artists.equals(&quot;Travis Scott&quot;)); // hashCode() System.out.println(&quot; n&quot; + &quot;- hashCode()&quot;); System.out.println(artists.hashCode() + &quot; n&quot;); // isEmpty() System.out.println(&quot;- isEmpyty()&quot;); System.out.println(artists.isEmpty() + &quot; n&quot;); // contains(element) System.out.println(&quot;- contains(element)&quot;); System.out.println(artists.contains(&quot;The&quot;) + &quot; n&quot;); // containsAll(Collection collection) System.out.println(&quot;- containsAll(Collection collection)&quot;); System.out.println(artists.contains(songs) + &quot; n&quot;); // sort(Comparator comp) System.out.println(&quot;- sort(Comparator comp)&quot;); artists.sort(Comparator.naturalOrder()); System.out.println(artists); . - add(int index, element) [Lil Wayne, Kanye West, Katy Perry, Nujabes, The Alchemist] - addAll(int index, Collection collection) [Lil Wayne, Kanye West, Katy Perry, Nujabes, The Alchemist, 3 Peat, Bound 2, Dark Horse, Feather, Loose Change] - size() There are 10 terms in the ArrayList artists There are 5 terms in the ArrayList songs - clear() [] - remove(int index) [Lil Wayne, Kanye West, Katy Perry, Nujabes, The Alchemist, Bound 2, Dark Horse, Feather, Loose Change] - remove(element) [Lil Wayne, Katy Perry, Nujabes, The Alchemist, Bound 2, Dark Horse, Feather, Loose Change] - get(int index) Katy Perry - set(int index, element) [Lil Wayne, Katy Perry, Nujabes, Feather, Bound 2, Dark Horse, Feather, Loose Change] - indexOf(element) -1 - lastIndexOf(element) 4 - equals(element) false - hashCode() 379701710 - isEmpyty() false - contains(element) false - containsAll(Collection collection) false - sort(Comparator comp) [Bound 2, Dark Horse, Feather, Feather, Katy Perry, Lil Wayne, Loose Change, Nujabes] . import java.util.ArrayList; import java.util.Scanner; public class ArrayListing { public static void main(String[] args) { ArrayList&lt;String&gt; email = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; password = new ArrayList&lt;String&gt;(); Scanner sc = new Scanner(System.in); for (int i = 0; i &lt; 2; i++) { System.out.println(&quot;Please enter your email: &quot;); email.add(sc.next()); System.out.println(&quot;Please enter your password: &quot;); password.add(sc.next()); } System.out.println(&quot;Email ArrayList:&quot;); System.out.println(email); System.out.println(&quot;Password ArrayList:&quot;); System.out.println(password); } } ArrayListing.main(null); . Please enter your email: Please enter your password: Please enter your email: Please enter your password: Email ArrayList: [junlim954@gmail.com, newemail@hotmail.com] Password ArrayList: [junlimiscool123, newaccount123] .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2022/10/09/arraylists.html",
            "relUrl": "/jupyter/2022/10/09/arraylists.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Rapid API Formatted",
            "content": "Song Name Artist Image Link Award .",
            "url": "https://peacekeeper6.github.io/fastpages/habits/2022/10/06/formattedapi.html",
            "relUrl": "/habits/2022/10/06/formattedapi.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "RapidAPI Notebook",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://spotify-top-charts-2022.p.rapidapi.com/spotify_top_charts_22&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9e4650470emshc2461cc01c07b29p18b9b5jsnfa759ab87fca&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;spotify-top-charts-2022.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;code&#34;:&#34;ERROR_CODE_NOT_FOUND&#34;,&#34;message&#34;:&#34;This workspace no longer exists.&#34;} . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Random; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://billboard3.p.rapidapi.com/hot-100?date=2022-07-07&amp;range=1-10&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9e4650470emshc2461cc01c07b29p18b9b5jsnfa759ab87fca&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;billboard3.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); // Random r = new Random(); // int rn = r.nextInt((100 - 1) + 1) + 1; System.out.println(response.body()); . [{&#34;artist&#34;:&#34;Harry Styles&#34;,&#34;title&#34;:&#34;As It Was&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/04/harry-styles-bma-as-it-was-po3-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:1,&#34;weeksAtNo1&#34;:8,&#34;lastWeek&#34;:2,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:13},{&#34;artist&#34;:&#34;Jack Harlow&#34;,&#34;title&#34;:&#34;First Class&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2018/01/jack-harlow-i43-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:2,&#34;lastWeek&#34;:3,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:12},{&#34;artist&#34;:&#34;Lizzo&#34;,&#34;title&#34;:&#34;About Damn Time&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/04/lizzo-o9x-about-damn-time-f6q-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:3,&#34;lastWeek&#34;:5,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:3,&#34;weeksOnChart&#34;:11},{&#34;artist&#34;:&#34;Future Featuring Drake &amp; Tems&#34;,&#34;title&#34;:&#34;Wait For U&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/1988/03/future-f8b-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:4,&#34;lastWeek&#34;:4,&#34;change&#34;:&#34;same&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:9},{&#34;artist&#34;:&#34;Drake Featuring 21 Savage&#34;,&#34;title&#34;:&#34;Jimmy Cooks&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2009/04/drake-04g-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:5,&#34;lastWeek&#34;:1,&#34;change&#34;:&#34;down&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:2},{&#34;artist&#34;:&#34;Kate Bush&#34;,&#34;title&#34;:&#34;Running Up That Hill (A Deal With God)&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2021/03/kate-bush-qv2-running-up-that-hill-1cx-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:6,&#34;lastWeek&#34;:9,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:4,&#34;weeksOnChart&#34;:25},{&#34;artist&#34;:&#34;Beyonce&#34;,&#34;title&#34;:&#34;Break My Soul&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/07/beyonce-0na-break-my-soul-kqf-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Biggest gain in airplay&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 136 165.558 &#34;&gt;&lt;g data-name= &#34;Group 9 &#34;&gt;&lt;path data-name= &#34;Path 3019 &#34; d= &#34;M116 65.558l-16 24h8v24h16v-24h8z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3020 &#34; d= &#34;M20 65.558l-16 24h8v24h16v-24h8z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3021 &#34; d= &#34;M88 26.47a20 20 0 10-25.1 19.316l-.2.731c-.892 3.258-2.153 7.914-3.66 13.5-3.011 11.166-7 26.056-10.991 40.948-7.971 29.779-15.913 59.561-15.913 59.561l-1.342 5.031h74.424L73.038 45.801A20.018 20.018 0 0088 26.47zm-32 0a12 12 0 1112.065 12c-.086 0-.173-.007-.256-.006A12.008 12.008 0 0156 26.47zm11.951 31.231l9.635 35.857H58.314c3.707-13.832 7.155-26.675 9.637-35.857zm-18.2 67.857a66812.91 66812.91 0 016.42-24h23.564l6.449 24zm-8.545 32c1.8-6.744 4.008-15.021 6.407-24h40.72l6.449 24z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3022 &#34; d= &#34;M101.169 40.484a36.1 36.1 0 000-28.028l-7.368 3.116a28.1 28.1 0 010 21.8z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3023 &#34; d= &#34;M42.2 37.368a28.1 28.1 0 010-21.8l-7.368-3.116a36.1 36.1 0 000 28.028z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3024 &#34; d= &#34;M108.544 9.344a44.158 44.158 0 010 34.251l7.368 3.116a52.156 52.156 0 000-40.483z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3025 &#34; d= &#34;M20.088 6.228a52.156 52.156 0 000 40.483l7.368-3.116a44.158 44.158 0 010-34.251z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3026 &#34; d= &#34;M130.655 0l-7.368 3.116a60.216 60.216 0 010 46.707l7.368 3.116a68.214 68.214 0 000-52.939z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3027 &#34; d= &#34;M5.345 0a68.214 68.214 0 000 52.939l7.368-3.116a60.216 60.216 0 010-46.707z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;},{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:7,&#34;lastWeek&#34;:15,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:7,&#34;weeksOnChart&#34;:2},{&#34;artist&#34;:&#34;Bad Bunny &amp; Chencho Corleone&#34;,&#34;title&#34;:&#34;Me Porto Bonito&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/05/bad-bunny-c3m-me-porto-bonito-kug-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:8,&#34;lastWeek&#34;:11,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:7,&#34;weeksOnChart&#34;:8},{&#34;artist&#34;:&#34;Glass Animals&#34;,&#34;title&#34;:&#34;Heat Waves&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2020/07/glass-animals-rtd-heat-waves-o3i-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:9,&#34;lastWeek&#34;:10,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:76},{&#34;artist&#34;:&#34;Joji&#34;,&#34;title&#34;:&#34;Glimpse Of Us&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/06/joji-77h-glimpse-of-us-gt3-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:10,&#34;lastWeek&#34;:8,&#34;change&#34;:&#34;down&#34;,&#34;peakPosition&#34;:8,&#34;weeksOnChart&#34;:3}] . HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://billboard3.p.rapidapi.com/hot-100?date=2022-07-07&amp;range=1-10&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9e4650470emshc2461cc01c07b29p18b9b5jsnfa759ab87fca&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;billboard3.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2022/10/02/rapidapi.html",
            "relUrl": "/jupyter/2022/10/02/rapidapi.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Image Manipulation Notebook",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyScaleFile; private String redScaleFile; private String blueScaleFile; private String greenScaleFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyScaleFile = this.outDir + &quot;Grey&quot; + name + &quot;.&quot; + ext; this.redScaleFile = this.outDir + &quot;Red&quot; + name + &quot;.&quot; + ext; this.blueScaleFile = this.outDir + &quot;Blue&quot; + name + &quot;.&quot; + ext; this.greenScaleFile = this.outDir + &quot;Green&quot; + name + &quot;.&quot; + ext; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public void greyScale() { BufferedImage img = null; try { File file = new File(this.greyScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int grey = (int)(col.getRed()*0.3 + col.getGreen()*0.59 + col.getBlue()*0.11); try { Color rgb = new Color(grey, grey, grey); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greyScaleFile)); } catch (Exception ex) { } } public void redScale() { BufferedImage img = null; try { File file = new File(this.redScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); try { Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.redScaleFile)); } catch (Exception ex) { } } public void greenScale() { BufferedImage img = null; try { File file = new File(this.greenScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); try { Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greenScaleFile)); } catch (Exception ex) { } } public void blueScale() { BufferedImage img = null; try { File file = new File(this.blueScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); try { Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.blueScaleFile)); } catch (Exception ex) { } } // tester/driver public static void main(String[] args) throws IOException { Pics ascii = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); ascii.printStats(&quot;Original&quot;); ascii.resize(33); ascii.printStats(&quot;Scaled&quot;); ascii.convertToAscii(); Pics grey = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); grey.greyScale(); Pics red = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); red.redScale(); Pics green = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); green.greenScale(); Pics blue = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); blue.blueScale(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . ASCII: https://github.com/peacekeeper6/fastpages/blob/master/_notebooks/images/tmp/MonaLisa.txt Grey: Red: Green: Blue: .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2022/10/02/img-manipulation.html",
            "relUrl": "/jupyter/2022/10/02/img-manipulation.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Planning",
            "content": "Front page . Use of API for &quot;Song of the Day&quot; - pulls from most popular song on Billboard Hot 100 | Recommended songs based on user preference - what their results from the quiz were. If user doesn&#39;t have an account, encourage to sign up to unlock this section | . . Library page . Virtually all music genres in one place | . . Genre page . Blurb about genre | Lists 3 most popular artists from genre | Breadcrumbs nav | . . Artist page . Blurb about artist | List different things about them (Shown in image) | Breadcrumbs nav | . . Quiz page . Example of what the quiz page would look like | . . Question page . Example of what a question would look like | . . Results page . What is recommended and not recommended based on answers provided | Users can retake as many times as they want if they are unhappy with results - we cannot guarantee 100% accuracy | . . Quiz Data Flow . . . . .",
            "url": "https://peacekeeper6.github.io/fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fibonacci Notebook",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class For extends Fibo { public For() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public For(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;For Loop&quot;; long[] f = new long[] {0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } static public void main(String[] args) { For fiboFor = new For(); fiboFor.print(); } } For.main(null); . Init method = For Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . While Loop . public class While extends Fibo { public While() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public While(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;While Loop&quot;; int i = 0; long[] f = new long[] {0, 1}; while (i &lt; this.size) { this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; i++; } } static public void main(String[] args) { While fiboWhile = new While(); fiboWhile.print(); } } While.main(null); . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Recursive Loop . public class Recur extends Fibo { public Recur() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Recur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Recursive Loop&quot;; long[] f = new long[] {0, 1}; int i = 0; this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; i++; if (i &lt; this.size) { init(); } } static public void main(String[] args) { Recur fiboRecur = new Recur(); fiboRecur.print(); } } Recur.main(null); . java.lang.StackOverflowError: null at java.base/java.util.HashMap.putVal(HashMap.java:627) at java.base/java.util.HashMap.put(HashMap.java:608) at Fibo.setData(#15:1) at Recur.init(#32:29) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) at Recur.init(#32:33) .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2022/09/25/fibo.html",
            "relUrl": "/jupyter/2022/09/25/fibo.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Methods and Control Structures Notebook",
            "content": "This question involves simulation of the play and scoring of a single-player video game. In the game, a player attempts to complete three levels. A level in the game is represented by the Level class. public class Level { /* Returns true if the player reached the goal on this level and returns false otherwise / public boolean goalReached() { / implementation not shown / } . /* Returns the number of points (a positive integer) recorded for this level / public int getPoints() { / implementation not shown / } . // There may be instance variables, constructors, and methods that are not shown. } . | Play of the game is represented by the Game class. You will write two methods of the Game class. . public class Game { private Level levelOne; private Level levelTwo; private Level levelThree; . /* Postcondition: All instance variables have been initialized. / public Game() { / implementation not shown / } . /* Returns true if this game is a bonus game and returns false otherwise / public boolean isBonus() { / implementation not shown / } . /** Simulates the play of this Game (consisting of three levels) and updates all relevant . game data / public void play() { / implementation not shown */ } | . /* Returns the score earned in the most recently played game, as described in part (a) / public int getScore() { / to be implemented in part (a) / } . /** Simulates the play of num games and returns the highest score earned, as . described in part (b) | Precondition: num &gt; 0 / public int playManyTimes(int num) { / to be implemented in part (b) */ } | . // There may be instance variables, constructors, and methods that are not shown. } . (a) Write the getScore method, which returns the score for the most recently played game. Each game consists of three levels. The score for the game is computed using the following helper methods. . The isBonus method of the Game class returns true if this is a bonus game and returns false otherwise. | The goalReached method of the Level class returns true if the goal has been reached on a particular level and returns false otherwise. | The getPoints method of the Level class returns the number of points recorded on a particular level. Whether or not recorded points are earned (included in the game score) depends on the rules of the game, which follow. The score for the game is computed according to the following rules. | Level one points are earned only if the level one goal is reached. Level two points are earned only if both the level one and level two goals are reached. Level three points are earned only if the goals of all three levels are reached. | The score for the game is the sum of the points earned for levels one, two, and three. | If the game is a bonus game, the score for the game is tripled. | . public int getScore() { int points = 0; if (levelOne.goalReached()) { points += 200; if (levelTwo.goalReached()) { points += 100; if (levelThree.goalReached()) { points += 500; } } else { if (levelThree.goalReached()) { points += 500; } } } if (game.isBonus()) { points * 3; } System.out.println(points); } getScore(null); . (b) Write the playManyTimes method, which simulates the play of num games and returns the highest game score earned. For example, if the four plays of the game that are simulated as a result of the method call playManyTimes(4) earn scores of 75, 50, 90, and 20, then the method should return 90. . Play of the game is simulated by calling the helper method play. Note that if play is called only one time followed by multiple consecutive calls to getScore, each call to getScore will return the score earned in the single simulated play of the game. . Complete the playManyTimes method. Assume that getScore works as intended, regardless of what you wrote in part (a). You must call play and getScore appropriately in order to receive full credit. . /** Simulates the play of num games and returns the highest score earned, as . described in part (b) | Precondition: num &gt; 0 */ public int playManyTimes(int num) | . public int playManyTimes(int num) { int highestScore = 0; for (int i = 0; i &lt; num; i++) { play(); if (getScore() &gt; highestScore) { highestScore = getScore(); } } System.out.println(highestScore); } playMainTimes(null); .",
            "url": "https://peacekeeper6.github.io/fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Iteration Notebook",
            "content": "Array manipulation . Vertically . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; _ &quot;, &quot; ___ (_) &quot;, &quot; _//XXX &quot;, &quot; _ /XXXXXX _ __ &quot;, &quot;X __ __/X XXXX XX _ /XX __ ___ &quot;, &quot; __/ _/__ _//X __ /XX XXX ____/XXX &quot;, &quot; ___ / _ __ _/ _/ _/ - __ - __/ &quot;, &quot; ___/ __/ __ __ / _/ _ _ __ / ____// &quot;, &quot; / __ / _ _/_ ___ _/ / ___/ / __/ &quot;, &quot; __/_______ ________ __ _/________ _ _/_____/_____________/_______ ____/_______ &quot;, &quot; /| &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot; // &quot;*&quot; // &quot;***&quot; // &quot;|&quot; // &quot;*****&quot; // &quot;*******&quot; // &quot;*********&quot; }, //Monkey 1 { &quot; .--. &quot;, &quot; .&#39; `. &quot;, &quot; _`.-. _...._ .-.&#39;_ &quot;, &quot; (_)`-&#39; __)(__ `-&#39;(_) &quot;, &quot; (....__|7BYP715|__....)&quot;, &quot; | | ~~~~~~ | | &quot;, &quot; `-&#39; `-&#39; &quot; }, //Monkey 2 { &quot; _.--._&quot;, &quot; ,&#39;.-.&#39;,&quot;, &quot; /=&#39;`= &quot;, &quot; .F_______...._______Y.&quot;, &quot; |(_)(_) ______ (_)(_)|&quot;, &quot; (....__|18HG8G|__....)&quot;, &quot; | | ~~~~~~ | |&quot;, &quot; `-&#39; `-&#39;&quot;, }, //Monkey 3 { &quot; ____________&quot;, &quot; .F............T.&quot;, &quot; | .-. |&quot;, &quot; | |&#39;,&#39; &#39;,&#39; , | |&quot;, &quot; | `-&#39; |&quot;, &quot; _|.-. _...._ .-.|_&quot;, &quot; (_)`-&#39; __[]__ `-&#39;(_)&quot;, &quot; (....__|93J5UN3|__....)&quot;, &quot; | | ~~~~~~ | |&quot;, &quot; `-&#39; `-&#39;&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Cars approaching a mountainside Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i - 1 + &quot; cars approaching the road...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Cars approaching a mountainside Loopy 3 cars approaching the road... _ ___ (_) _//XXX _ /XXXXXX _ __ X __ __/X XXXX XX _ /XX __ ___ __/ _/__ _//X __ /XX XXX ____/XXX ___ / _ __ _/ _/ _/ - __ - __/ ___/ __/ __ __ / _/ _ _ __ / ____// / __ / _ _/_ ___ _/ / ___/ / __/ __/_______ ________ __ _/________ _ _/_____/_____________/_______ ____/_______ /| / | / | / | / | / | / | / | / | / | .--. .&#39; `. _`.-. _...._ .-.&#39;_ (_)`-&#39; __)(__ `-&#39;(_) (....__|7BYP715|__....) | | ~~~~~~ | | `-&#39; `-&#39; _.--._ ,&#39;.-.&#39;, /=&#39;`= .F_______...._______Y. |(_)(_) ______ (_)(_)| (....__|18HG8G|__....) | | ~~~~~~ | | `-&#39; `-&#39; ____________ .F............T. | .-. | | |&#39;,&#39; &#39;,&#39; , | | | `-&#39; | _|.-. _...._ .-.|_ (_)`-&#39; __[]__ `-&#39;(_) (....__|93J5UN3|__....) | | ~~~~~~ | | `-&#39; `-&#39; 2 cars approaching the road... _ ___ (_) _//XXX _ /XXXXXX _ __ X __ __/X XXXX XX _ /XX __ ___ __/ _/__ _//X __ /XX XXX ____/XXX ___ / _ __ _/ _/ _/ - __ - __/ ___/ __/ __ __ / _/ _ _ __ / ____// / __ / _ _/_ ___ _/ / ___/ / __/ __/_______ ________ __ _/________ _ _/_____/_____________/_______ ____/_______ /| / | / | / | / | / | / | / | / | / | .--. .&#39; `. _`.-. _...._ .-.&#39;_ (_)`-&#39; __)(__ `-&#39;(_) (....__|7BYP715|__....) | | ~~~~~~ | | `-&#39; `-&#39; _.--._ ,&#39;.-.&#39;, /=&#39;`= .F_______...._______Y. |(_)(_) ______ (_)(_)| (....__|18HG8G|__....) | | ~~~~~~ | | `-&#39; `-&#39; 1 cars approaching the road... _ ___ (_) _//XXX _ /XXXXXX _ __ X __ __/X XXXX XX _ /XX __ ___ __/ _/__ _//X __ /XX XXX ____/XXX ___ / _ __ _/ _/ _/ - __ - __/ ___/ __/ __ __ / _/ _ _ __ / ____// / __ / _ _/_ ___ _/ / ___/ / __/ __/_______ ________ __ _/________ _ _/_____/_____________/_______ ____/_______ /| / | / | / | / | / | / | / | / | / | .--. .&#39; `. _`.-. _...._ .-.&#39;_ (_)`-&#39; __)(__ `-&#39;(_) (....__|7BYP715|__....) | | ~~~~~~ | | `-&#39; `-&#39; 0 cars approaching the road... _ ___ (_) _//XXX _ /XXXXXX _ __ X __ __/X XXXX XX _ /XX __ ___ __/ _/__ _//X __ /XX XXX ____/XXX ___ / _ __ _/ _/ _/ - __ - __/ ___/ __/ __ __ / _/ _ _ __ / ____// / __ / _ _/_ ___ _/ / ___/ / __/ __/_______ ________ __ _/________ _ _/_____/_____________/_______ ____/_______ /| / | / | / | / | / | / | / | / | / | 0000000000000000000000000000000000 THE END .",
            "url": "https://peacekeeper6.github.io/fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Focus/Habits",
            "content": "Focus/Habits . Psychology and the Good Life (Video) . Feel more gradtitude | Help others, don’t be afraid to ask for help | It’s okay to be in the moment Gratitude List . | Family and friends | Being alive | Good health | Good situation/circumstances Goals . | Develop technical and interpersonal skills for CS | Get more sleep | Time Management (work on procrastination) | Take more responsibility | .",
            "url": "https://peacekeeper6.github.io/fastpages/habits/2022/09/11/focus-habits.html",
            "relUrl": "/habits/2022/09/11/focus-habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java GUI Notebook",
            "content": "Use of objects and classes . // import packages import org.code.neighborhood.*; . // Defining a class called MyNeighborhood public class MyNeighborhood { public static void main(String[] args) { // creating an instance of PainterPlus() with variable name myBackgroundPainter PainterPlus myPainterPlus = new PainterPlus(); // Running turnRight() method from PainterPlus instance myPainterPlus.turnRight(); } } . // Creating subclass of PainterPlus which inherits attributes from superclass Painter public class PainterPlus extends Painter { public PainterPlus() { super(); } // Defining public turnRight() method with no return types in PainterPlus class public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } . Java Menu for Physics - Milligrams to other measurements . No rounding: everything is made exact, double is used to ensure this | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose a milligram conversion&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Milligrams to Nanograms&quot;); System.out.println(&quot;2 - Milligrams to Centigrams&quot;); System.out.println(&quot;3 - Milligrams to Kilograms&quot;); System.out.println(&quot;4 - Milligrams to Gigagrams&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: Scanner input = new Scanner(System.in); System.out.println(&quot;How many milligrams?&quot;); int nano = input.nextInt(); System.out.println(&quot;That is equivalent to &quot; + nano * 1000000 + &quot; nanograms.&quot;); // System.out.print(&quot;Enter a coefficient&quot;); // double coefficient = input.nextDouble(); // try { // System.out.println(&quot;&quot;); // } catch (Exception e) { // System.out.println(&quot;Not a variable&quot;); // } // System.out.print(&quot;Enter a variable&quot;); // String variable = input.nextLine(); // try { // System.out.println(&quot;&quot;); // } catch (Exception e) { // System.out.println(&quot;Not an exponent&quot;); // } // System.out.print(&quot;Enter an exponent&quot;); // double exponent = input.nextDouble(); // input.close(); // System.out.println(&quot;Calculating...&quot;); // System.out.println(&quot;Your derivative is &quot; + coefficient*exponent + variable + &quot;^&quot; + exponent); input.close(); break; case 2: Scanner input1 = new Scanner(System.in); System.out.println(&quot;How many milligrams?&quot;); int centi = input1.nextInt(); System.out.println(&quot;That is equivalent to &quot; + centi * 0.1 + &quot; centigrams.&quot;); input1.close(); break; case 3: Scanner input2 = new Scanner(System.in); System.out.println(&quot;How many milligrams?&quot;); double kilo = input2.nextDouble(); //doubles used to produce more exact answers System.out.println(&quot;That is equivalent to &quot; + kilo/1000000 + &quot; kilograms.&quot;); input2.close(); break; case 4: Scanner input3 = new Scanner(System.in); System.out.println(&quot;How many milligrams?&quot;); double mega = input3.nextDouble(); System.out.println(&quot;That is equivalent to &quot; + mega/1000000000 + &quot; megagrams.&quot;); input3.close(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose a milligram conversion - 1 - Milligrams to Nanograms 2 - Milligrams to Centigrams 3 - Milligrams to Kilograms 4 - Milligrams to Gigagrams 0 - Quit - 1: How many milligrams? That is equivalent to 10000000 nanograms. 2: How many milligrams? That is equivalent to 1.0 centigrams. 3: How many milligrams? That is equivalent to 1.0E-5 kilograms. 4: How many milligrams? That is equivalent to 1.0E-8 megagrams. 0: Goodbye, World! . Java GUI . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Calculator menu&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Derivative Calculator&quot;, &quot;Integral Calculator&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;/&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, CSA&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Java GUI notebook not working | . My takeaways: . Multiple inputs are unable to be accepted | JTextField used to get inputs. This will be needed to accept inputs for a calculator unless a bunch of buttons are used | &quot;msg&quot; object is used. Thus methods must be based around this object, so things made with Scanner cannot just be copy and pasted over | &quot;implements&quot; used in constructor signature. These are used to implement an interface; extends cannot replace it here | Need to read up on Swing documentation. There is a lot more to be learned before randomly attempting something and failing | .",
            "url": "https://peacekeeper6.github.io/fastpages/java/2022/09/05/javagui.html",
            "relUrl": "/java/2022/09/05/javagui.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Boolean Expressions and If Statements",
            "content": "&quot;A Boolean expression is a logical statement that can be evaluated to True or False. A Boolean expression may be composed of a combination of the Boolean constants true or false.&quot; . // All of the boolean expressions below evaluate to true if (true) { // if condition is true System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { // if condition is true and not false System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { //if condition is true or false System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { //if condition is true and not false then // evaluate whether condition is true or false too System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { // if condition is not false and not true then // evaluate if not false and not true System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } . If statement is a conditional that determines if a condition is met and acts on it . public class Main { public static void main(String[] args) { int num = 5; //initialized at 5 to give example with if if (num &gt; 4) { System.out.println(&quot;Number is greater than 4&quot;); } } } Main.main(null); . Number is greater than 4 . If else statement is a conditional that determines if a condition is met or not then acts on it . public class Main { public static void main(String[] args) { int num = 3; //initalized at 3 to give example with else if (num &gt; 4) { System.out.println(&quot;Number is greater than 4&quot;); } else { System.out.println(&quot;Number is less than 4&quot;); } } } Main.main(null); . Number is less than 4 . If else - if else statement is a conditional inside of a conditional. If the else statement is met, then it will go through another if else statement to determine the conditions . public class Main { public static void main(String[] args) { double num = 3.5; if (num &gt; 4) { System.out.println(&quot;Number is greater than 4&quot;); } else { if (num &gt; 0) { System.out.println(&quot;Number is positive&quot;); } else { System.out.println(&quot;Number is negative&quot;); } } } } Main.main(null); . Number is positive . Bonus points if you can count how many conditionals are used . public class Main { public static void main(String[] args) { System.out.println(&quot;Choosing number between 70 and 80...&quot;); int num = 78; if (num &gt; 90) { //oops System.out.println(&quot;Number is greater than 90&quot;); } else { if (num == 80) { System.out.println(&quot;Number is 80&quot;); } else { if (num &gt; 70) { //notice that if statements are nested to keep it running if one condition is not met System.out.println(&quot;Number is greater than 70&quot;); if (num &gt; 74) { System.out.println(&quot;Number is between 75 and 80&quot;); if (num &gt; 75) { System.out.println(&quot;Number is between 76 and 80&quot;); if (num &gt; 76) { System.out.println(&quot;Number is between 77 and 80&quot;); if (num &gt; 77) { System.out.println(&quot;Number is between 78 and 80&quot;); if (num &gt; 78) { System.out.println(&quot;Number is 79&quot;); } else { System.out.println(&quot;Number is 78&quot;); } } else { System.out.println(&quot;Number is 77&quot;); } } else { System.out.println(&quot;Number is 76&quot;); } } else { System.out.println(&quot;Number is 75&quot;); } } else { if (num &lt; 74) { System.out.println(&quot;Number is between 70 and 73&quot;); if (num &lt; 73) { System.out.println(&quot;Number is between 70 and 72&quot;); if (num &lt; 72) { System.out.println(&quot;Number is 70 or 71&quot;); if (num &lt; 71) { System.out.println(&quot;Number is 70&quot;); } else { System.out.println(&quot;Number is 71&quot;); } } else { System.out.println(&quot;Number is 72&quot;); } } else { System.out.println(&quot;Number is 73&quot;); } } else { System.out.println(&quot;Number is 74&quot;); } } } } } } } Main.main(null); . Choosing number between 70 and 100... Number is greater than 70 Number is between 75 and 80 Number is between 76 and 80 Number is between 77 and 80 Number is between 78 and 80 Number is 78 . De Morgan&#39;s Laws . If already being confused wasn&#39;t enough . De Morgan&#39;s Laws essentially consider the relationship of opposites . If not false, then true. If not true, then false. There needs to be at least one true statement for a conditional to work Here is an example in code . public class Main { public static void main(String[] args) { if (true &amp;&amp; !false) { System.out.println(&quot;True&quot;); } if (!true || !false) { System.out.println(&quot;Also true&quot;); } if (!true || false) { System.out.println(&quot;False&quot;); } if (!true &amp;&amp; false) { System.out.println(&quot;Also false&quot;); //these will not print because they are false! } } } Main.main(null); . True Also true .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2022/09/05/boolean_ifs.html",
            "relUrl": "/jupyter/2022/09/05/boolean_ifs.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Code.org",
            "content": "Code.org Learnings . . Code.org helped me realize that objects can be created and used | Once they are created, they can be used in other files/locations by being called and extended | . . In this example, the PatternPainter object is created in a separate file and extends the Painter object from myNeighborhood. | Important to objects that are extended are higher-up. Ex: tacos extends food | . . Then, myNeighborhood takes the PatternPainter object and creates a new instance of it, which allows it to be used as an object | Shown here, methods are being used with the newly instantiated object | .",
            "url": "https://peacekeeper6.github.io/fastpages/code.org/2022/09/05/Code-Org.html",
            "relUrl": "/code.org/2022/09/05/Code-Org.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Learning Plan",
            "content": "This is where I will be capturing my learning in CSA. I will be capturing information for all 10 CB Units through notes in tangible assignments we have done, as well as additional notes if needed. I am able to recognize whether something is PBL or meeting CB Requirements by looking at both the Canvas assignment descriptions and the CB videos. Knowing that something we are doing is not part of CB will make me put it in the second Table of Contents. . . Table of Contents by Units (CB Learning) . Unit 1 - Primitive Types | Unit 2 - Using Objects | Unit 3 - Boolean Expressions and if Statements | Unit 4 - Iteration | Unit 5 - Writing Classes | Unit 6 - Array | Unit 7 - Arrayist | Unit 8 - 2D Array | Unit 9 - Inheritance | Unit 10 - Recursion | Unit 1 - Primitive Types . Primitives Notebook | . Unit 2 - Using Objects . Unit 3 - Boolean Expressions and if Statements . Unit 4 - Iteration . Unit 5 - Writing Classes . Unit 6 - Array . Unit 7 - Arrayist . Unit 8 - 2D Array . Unit 9 - Inheritance . Unit 10 - Recursion . . Table of Contents by Weeks (PBL) . Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | Week 8 | Week 9 | Week 10 | Week 11 | Week 0 . Python Notebook | Java Notebook | Hacks | . Week 1 . Bash Notebook | Primitives Notebook | Hacks | . Week 2 . Week 3 . Week 4 . Week 5 . Week 6 . Week 7 . Week 8 . Week 9 . Week 10 . Week 11 .",
            "url": "https://peacekeeper6.github.io/fastpages/markdown/2022/08/29/Learning-Plan.html",
            "relUrl": "/markdown/2022/08/29/Learning-Plan.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Bash Notebook",
            "content": "Hack 1 - Verifying tool installation . echo &quot;Verifying tools...&quot; echo &quot;Python3 version:&quot; python3 --version echo &quot;Pip version:&quot; pip --version echo &quot;Python2 version:&quot; python2 --version echo &quot;Java version:&quot; java --version echo &quot;Javac version:&quot; javac --version echo &quot;Tool verification done&quot; . Verifying tools... Python3 version: Python 3.9.12 Pip version: pip 21.2.4 from /home/junlim954/anaconda3/lib/python3.9/site-packages/pip (python 3.9) Python2 version: Python 2.7.18 Java version: openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) Javac version: javac 11.0.16 Tool verification done . Hack 2 - Verification with Anaconda . echo &quot;Checking directory...&quot; pwd echo &quot;Listing files...&quot; ls echo &quot;Anaconda version:&quot; conda --version echo &quot;Npm version:&quot; npm -version jupyter kernelspec list . Checking directory... /home/junlim954 Listing files... Anaconda3-2022.05-Linux-x86_64.sh anaconda3 spring-portfolio Anaconda3-2022.05-Linux-x86_64.sh.1 ijava-1.3.0.zip vscode Anaconda3-2022.05-Linux-x86_64.sh.2 install.py Anaconda3-2022.05-Linux-x86_64.sh.3 java Anaconda version: conda 4.13.0 Npm version: 3.10.10 Available kernels: bash /home/junlim954/.local/share/jupyter/kernels/bash java /home/junlim954/.local/share/jupyter/kernels/java javascript /home/junlim954/.local/share/jupyter/kernels/javascript python3 /home/junlim954/.local/share/jupyter/kernels/python3 . Hack 3 - Updating a Repository . cd ~/vscode/fastpages echo &quot;Checking remote...&quot; git remote -v echo &quot;Pulling...&quot; git pull echo &quot;Staging changes...&quot; git add . git status echo &quot;Committing changes...&quot; git commit -a git push . Checking remote... origin https://github.com/peacekeeper6/fastpages.git (fetch) origin https://github.com/peacekeeper6/fastpages.git (push) Pulling... Already up to date. Staging changes... On branch master Your branch is up to date with &#39;origin/master&#39;. Changes to be committed: (use &#34;git restore --staged &lt;file&gt;...&#34; to unstage) modified: _notebooks/2022-08-25-bashnb.ipynb new file: _notebooks/2022-08-26-test-notebook.ipynb new file: _notebooks/2022-08-27-tests.md Committing changes... . Hack 4 - Automating package installation process . cd # sudo apt update # sudo apt upgrade PYTHON3=$(python3 --version) PYTHON2=$(python2 --version) JAVA=$(java --version) JAVAC=$(javac --version) echo &quot;Checking for Python2...&quot; if [ ! -d $PYTHON2 ] then echo &quot;Downloading Python2&quot; sudo apt install python2 fi echo &quot;Python2 exists&quot; echo &quot;Checking for Python3...&quot; if [ ! -d $PYTHON3 ] then echo &quot;Downloading Python3&quot; sudo apt install python3 fi echo &quot;Python3 exists&quot; echo &quot;Checking for Java...&quot; if [ ! -d $JAVA ] then echo &quot;Downloading Java&quot; sudo apt install default-jdk fi echo &quot;Java exists&quot; echo &quot;Checking for Javac&quot; if [ ! -d $JAVAC ] then echo &quot;Downloading Javac&quot; sudo apt install default-jre fi # sudo apt install unzip . Python 2.7.18 Checking for Python2... Python2 exists Checking for Python3... bash: [: Python: binary operator expected Python3 exists Checking for Java... bash: [: too many arguments Java exists Checking for Javac bash: [: javac: binary operator expected [sudo] password for junlim954: . Hack 5 - Automating the creating and opening of Jupyter Notebooks . cd ~/vscode/fastpages/_notebooks ls echo &quot;&quot; echo &quot;Creating new notebook...&quot; echo &quot;&quot; file=&quot;2022-08-26-test-notebook.ipynb&quot; touch &quot;$file&quot; ls # echo &quot;Loading notebook to make edits...&quot; # nano &quot;$file&quot; echo &quot;&quot; echo &quot;Loading all notebooks...&quot; echo &quot;&quot; jupyter notebook exit 0 . 2020-02-20-test.ipynb 2022-08-25-bashnb.ipynb ghtop_images 2022-08-22-javanb.ipynb 2022-08-26-test-notebook.ipynb my_icons 2022-08-22-pythonnb.ipynb 2022-08-27-tests.md 2022-08-24-primitives.ipynb README.md Creating new notebook... 2020-02-20-test.ipynb 2022-08-25-bashnb.ipynb ghtop_images 2022-08-22-javanb.ipynb 2022-08-26-test-notebook.ipynb my_icons 2022-08-22-pythonnb.ipynb 2022-08-27-tests.md 2022-08-24-primitives.ipynb README.md Loading all notebooks... [I 2022-08-27 12:22:33.999 LabApp](B JupyterLab extension loaded from /home/junlim954/anaconda3/lib/python3.9/site-packages/jupyterlab [I 2022-08-27 12:22:34.000 LabApp](B JupyterLab application directory is /home/junlim954/anaconda3/share/jupyter/lab [I 12:22:34.004 NotebookApp](B Serving notebooks from local directory: /home/junlim954/vscode/fastpages/_notebooks [I 12:22:34.004 NotebookApp](B Jupyter Notebook 6.4.8 is running at: [I 12:22:34.004 NotebookApp](B http://localhost:8888/?token=c0543c7efe3bdfa6d245cbd214aeb96915d2d613bcf9b52d [I 12:22:34.004 NotebookApp](B or http://127.0.0.1:8888/?token=c0543c7efe3bdfa6d245cbd214aeb96915d2d613bcf9b52d [I 12:22:34.004 NotebookApp](B Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). [C 12:22:34.095 NotebookApp](B To access the notebook, open this file in a browser: file:///home/junlim954/.local/share/jupyter/runtime/nbserver-3870-open.html Or copy and paste one of these URLs: http://localhost:8888/?token=c0543c7efe3bdfa6d245cbd214aeb96915d2d613bcf9b52d or http://127.0.0.1:8888/?token=c0543c7efe3bdfa6d245cbd214aeb96915d2d613bcf9b52d . cd ~/vscode/fastpages/_notebooks #Mr. M example using .md files instead file=&quot;2022-08-27-tests.md&quot; if [ -f &quot;$file&quot; ] || [ -e &quot;$file&quot;]; then rm $file fi tee -a $file &lt;&lt;EOF title: Test Notebook description: I am testing making notebook categories: [jupyter] # Test Notebook &gt; A test notebook made using bash EOF defaults=(&quot;- toc: true&quot;, &quot;- badges: true&quot;, &quot;- comments: true&quot;, &quot;- categories: [primitives]&quot;, &quot;- image: images/primitivess.jpg&quot;) for default in ${defaults[@]}; do echo &quot;- $default&quot; &gt;&gt; $file done echo &quot;&quot; echo &quot;File listing and status&quot; ls -l $file # list file wc $file # show words ls . title: Test Notebook description: I am testing making notebook categories: [jupyter] # Test Notebook &gt; A test notebook made using bash File listing and status -rw-r--r-- 1 junlim954 junlim954 280 Aug 27 12:20 2022-08-27-tests.md 22 53 280 2022-08-27-tests.md 2020-02-20-test.ipynb 2022-08-25-bashnb.ipynb ghtop_images 2022-08-22-javanb.ipynb 2022-08-26-test-notebook.ipynb my_icons 2022-08-22-pythonnb.ipynb 2022-08-27-tests.md 2022-08-24-primitives.ipynb README.md .",
            "url": "https://peacekeeper6.github.io/fastpages/bash/2022/08/25/bashnb.html",
            "relUrl": "/bash/2022/08/25/bashnb.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Primitives Notebook",
            "content": "Wrapper Classes . Java likes everything to have classes | Wrapper classes are a way to use primitive data types like int, char, byte, etc | Wrapper classes also have methods while primitives do not Methods are built-in and do certain actions like convert string to int | . | Luckily primitives are not OOP, unlike everything else in Java | . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 5 Enter a double: 335.0 Enter a boolean: Not an boolean (true or false), java.util.InputMismatchException Enter a String: . Code.org . int a = 3; int b = 10; double c = 2.5; c = 2 * a - 15 / b + c; System.out.println(&quot;Result: &quot; + c) . Result: 7.5 . Casting . Used in Java to change data types of variables . Doubles are rounded to the nearest integer (int) (x + 0.5) or (int) (x - 0.5) for negative numbers | . public class Casting { public static void main(String[] args) { System.out.println (6/4 + &quot; - produced because int/int&quot;); System.out.println(6.0/4 + &quot; - produced because double/int&quot;) ; System.out.println(6/4.0 + &quot; - produced because int/double&quot;); System.out.println((double) 6/4 + &quot; - produced because double/int&quot;); } public static void ex1(String[] args) { double a = 13.124; // int b = a; &lt;- This result would not be produced because double to int conversion results in loss/truncation of numbers // System.out.println(b); } public static void ex2(String[] args) { // int a = 6.75; // int b = 124; // System.out.println(a + b); &lt;- Thus, this result is not possible using the compiler. However, doing this manually would result in 131 because rounding is needed for ints. } public static void ex3(String[] args) { int a = 82; double b = 12.2; System.out.println(a - b + &quot; - This result is possible because the number turns into a double, meaning that there is no truncation&quot;); } } Casting.main(null); Casting.ex1(null); Casting.ex2(null); Casting.ex3(null); . 1 - produced because int/int 1.5 - produced because double/int 1.5 - produced because int/double 1.5 - produced because double/int 69.8 - This result is possible because the number turns into a double, meaning that there is no truncation . Hack . Points per game, PPG, calculator . int is used for points, regular season games, and playoff games, which is necessary because these can only be whole numbers | double is used to calculate PPG, which can have decimals in it. Math function is used to limit number of decimals to standard usage | boolean is necessary to ensure player is using google for questions following | string is necessary for player name | For results, double is used to create a number with decimal, which is the standard for calculating PPG in NBA. Thus, things like integer would be unncessary because they are not the standard | Compound assignment operator used in calculating total games played, regular season + playoffs, in order to get total points/games for PPG calculation | . import java.util.Scanner; public class ScanPPG { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Enter a Player&quot; + System.lineSeparator()); // personal note: do not use ln when making input String name = input.nextLine(); try { System.out.println(&quot;Nice choice, unless you chose Steph Curry&quot;); } catch (Exception e) { System.out.println(&quot;Not a name&quot;); } input.close(); input = new Scanner(System.in); System.out.print(&quot;True or false: you have Google open right now&quot; + System.lineSeparator()); boolean resp = input.nextBoolean(); try { System.out.println(&quot;Google will be important...&quot;); } catch (Exception e) { System.out.println(&quot;Not true/false&quot;); } input.close(); input = new Scanner(System.in); System.out.print(&quot;How many total points did your player score (counting playoffs)?&quot; + System.lineSeparator()); int points = input.nextInt(); try { System.out.println(&quot;Not bad&quot;); } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } input.close(); input = new Scanner(System.in); System.out.print(&quot;How many games did your player play in the regular season?&quot; + System.lineSeparator()); int games = input.nextInt(); try { System.out.println(&quot;That&#39;s a lot&quot;); } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } input.close(); input = new Scanner(System.in); System.out.print(&quot;If your player made the playoffs, how many games did they play there?&quot; + System.lineSeparator()); int playoffgames = input.nextInt(); try { System.out.println(&quot;Total generating...&quot;); } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } games += playoffgames; //result is playoff games being added to regular season games input.close(); double PPG = points/games; double rounded = Math.round(PPG * 10.0) / 10.0; System.out.println(name + &quot; averaged &quot; + rounded + &quot; points a game&quot;); } } ScanPPG.main(null); . Enter a Player Nice choice, unless you chose Steph Curry True or false: you have Google open right now Google will be important... How many total points did your player score (counting playoffs)? Not bad How many games did your player play in the regular season? That&#39;s a lot If your player made the playoffs, how many games did they play there? Total generating... Paul George averaged 24.0 points a game .",
            "url": "https://peacekeeper6.github.io/fastpages/primitives/2022/08/24/primitives.html",
            "relUrl": "/primitives/2022/08/24/primitives.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Week 1 - Tools Setup",
            "content": "Hacks . Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | | | Github Insights for Fastpages | Github Insights for Java Project | . Java Project . | First commit | .",
            "url": "https://peacekeeper6.github.io/fastpages/markdown/2022/08/22/tools.html",
            "relUrl": "/markdown/2022/08/22/tools.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://peacekeeper6.github.io/fastpages/python/2022/08/22/pythonnb.html",
            "relUrl": "/python/2022/08/22/pythonnb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Java Notebook",
            "content": "public class Main { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Main.main(null) . Hello World! .",
            "url": "https://peacekeeper6.github.io/fastpages/java/2022/08/22/javanb.html",
            "relUrl": "/java/2022/08/22/javanb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /home/junlim954/vscode/fastpages/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/junlim954/vscode/fastpages/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/junlim954/vscode/fastpages/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/junlim954/vscode/fastpages/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;altair&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . | #collapse-show illegal character: &#39;#&#39; . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . | # display table with pandas illegal character: &#39;#&#39; | # display table with pandas &#39;;&#39; expected . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://peacekeeper6.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://peacekeeper6.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "THIS IS A MARKDOWN TEST. . NOW THIS IS A MARKDOWN COMMIT TEST USING VSCODE. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://peacekeeper6.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://peacekeeper6.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}